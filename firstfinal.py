# -*- coding: utf-8 -*-
"""FirstFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J7ZxTmvcFpbxiUOumcenFF5ULzDAotB3
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec

data = pd.read_csv("/content/drive/MyDrive/credit card/creditcard.csv")

data.head()

print(data.shape)
print(data.describe())

fraud = data[data['Class'] == 1]
valid = data[data['Class'] == 0]
outlierFraction = len(fraud)/float(len(valid))
print(outlierFraction)
print('Fraud Cases: {}'.format(len(data[data['Class'] == 1])))
print('Valid Transactions: {}'.format(len(data[data['Class'] == 0])))

print('Amount details of the fraudulent transaction')
fraud.Amount.describe()

print('Amount details of the valid transaction')
valid.Amount.describe()

corrmat = data.corr()
fig = plt.figure(figsize = (12, 9))
sns.heatmap(corrmat, vmax = .8, square = True)
plt.show()

X = data.drop(['Class'], axis = 1)
Y = data["Class"]
print(X.shape)
print(Y.shape)
xData = X.values
yData = Y.values

from sklearn.model_selection import train_test_split
xTrain, xTest, yTrain, yTest = train_test_split(
        xData, yData, test_size = 0.2, random_state = 42)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
rfc.fit(xTrain, yTrain)
yPred = rfc.predict(xTest)

import numpy as np
from sklearn.metrics import (classification_report,accuracy_score,precision_score,recall_score,f1_score,matthews_corrcoef,confusion_matrix,)

if np.isnan(yTest).any() or np.isnan(yPred).any():
    print("NaN values found in yTest or yPred. Cleaning data...")
    valid_indices = ~np.isnan(yTest) & ~np.isnan(yPred)
    yTest = yTest[valid_indices]
    yPred = yPred[valid_indices]

if len(yTest) != len(yPred):
    raise ValueError("yTest and yPred must have the same length after cleaning.")

n_outliers = len(yTest)
n_errors = (yPred != yTest).sum()
print("The model used is Random Forest classifier")


acc = accuracy_score(yTest, yPred)
print(f"The accuracy is {acc}")

prec = precision_score(yTest, yPred)
print(f"The precision is {prec}")

rec = recall_score(yTest, yPred)
print(f"The recall is {rec}")

f1 = f1_score(yTest, yPred)
print(f"The F1-Score is {f1}")

MCC = matthews_corrcoef(yTest, yPred)
print(f"The Matthews correlation coefficient is {MCC}")

conf_matrix = confusion_matrix(yTest, yPred)
print("Confusion Matrix:\n", conf_matrix)

class_report = classification_report(yTest, yPred)
print("Classification Report:\n", class_report)

LABELS = ['Normal', 'Fraud']
conf_matrix = confusion_matrix(yTest, yPred)
plt.figure(figsize =(12, 12))
sns.heatmap(conf_matrix, xticklabels = LABELS,
            yticklabels = LABELS, annot = True, fmt ="d");
plt.title("Confusion matrix")
plt.ylabel('True class')
plt.xlabel('Predicted class')
plt.show()
